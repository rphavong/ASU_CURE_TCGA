### Youtube Tutorial: "Download data from GDC Portal using TCGAbiolinks R Package" and 
### "Survival Analysis with TCGA data in R Tutorial (Creating Kaplan-Meier Curves" by Khushbu Patel
### Used these tutorial combinations to look at TCGA-SKCM project

## Download Bioconductor to then install TCGAbiolinks
## from website: https://rdrr.io/bioc/TCGAbiolinks/ 
# if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")

# BiocManager::install("TCGAbiolinks")

### Separetely I also had to install the following for certain steps of this tutorial ### 
# Note: had to install 'maftools' by using "BiocManager::install("maftools")" separately from website: https://www.bioconductor.org/packages/release/bioc/html/maftools.html

# Note: I also had to install 'sesameData' and 'sesame' from Bioconductor using "BiocManager::install("sesameData")" and "BiocManager::install("sesame")"

## Load required packages for this tutorial
library(TCGAbiolinks)
library(tidyverse)
library(maftools)
library(pheatmap)
library(SummarizedExperiment)
library(survival)
library(survminer)
library(DESeq2)

# Get a list of projects
# Gets list of projects within the GDC Portal
gdcprojects <- getGDCprojects()

# Extract projects of interest and obtain summary from only Project TCGA-SKCM. This summarizes number of files, case counts, and data category (such as SBV, Sequencing Reads, Transcriptome Profiling, etc)
getProjectSummary('TCGA-SKCM')

# Building a query for the extraction of project of interest
# In this case, TCGA-SKCM is the project of interest, and I am interested in the Transcriptome Profiling/gene expression data
query_TCGA_SKCM <- GDCquery(project = 'TCGA-SKCM',
         data.category = 'Transcriptome Profiling')
# Extract the files that are only Transcriptome Profiling data
output_query_TCGA_SKCM <- getResults(query_TCGA_SKCM)


## Build a query to retrieve gene expression data
# Here I tried to retrieve the most and least files of interest, where I extracted based on the following: Transciptome data, RNA-seq data only, where they were counted using STAR, had only 'open' access and annotated as Primary Sample. Based on my scrolling of the data, I only noted the annotations to be either "Primary Tumor" or "Metastatic". 

query_TCGA_SKCM <- GDCquery(project = 'TCGA-SKCM',
                       data.category = 'Transcriptome Profiling',
                       experimental.strategy = 'RNA-Seq',
                       workflow.type = 'STAR - Counts',
                       access = 'open',
                       sample.type = 'Primary Tumor') 

getResults(query_TCGA_SKCM)

# Download data of interest from files filtered for gene expression of Primary Tumors from Project TCGA-SKCM using GDCdownload
GDCdownload(query_TCGA_SKCM)

# Prepare GDC data
# Prepare data to extract information from the data selected
tcga_skcm_data <- GDCprepare(query_TCGA_SKCM, summarizedExperiment = TRUE)

# To retrieve counts data using assay function
skcm_matrix <- assay(tcga_skcm_data, 'fpkm_unstrand')


## Get clinical data for TCGA-SKCM 
### Note
#### days_to_death, that is the number of days passed from the initial diagnosis to the patientâ€™s death (clearly, this is only relevant for dead patients)
#### days_to_last_follow_up that is the number of days passed from the initial diagnosis to the last visit.

clinical_skcm <- GDCquery_clinic("TCGA-SKCM")
any(colnames(clinical_skcm) %in% c("vital_status", "days_to_last_follow_up", "days_to_death")) # This outputs if these column names are present 
which(colnames(clinical_skcm) %in% c("vital_status", "days_to_last_follow_up", "days_to_death")) # This outputs in which column numbers do these variables appear
head(clinical_skcm[,c(9,38,43)]) # This was to print the columns of interest: "vital_status", "days_to_last_follow_up", "days_to_death"

## Look at the numbers of vital status of patients that are reported 'Alive' or 'Dead'
table(clinical_skcm$vital_status)

## Add  certain values the way they are encoded using ifelse (if and else statement)
clinical_skcm$deceased <- ifelse(clinical_skcm$vital_status == "Alive", FALSE, TRUE)
table(clinical_skcm$deceased) # Need to figure out how to omit the "Not Reported" vital_status 

## Create an "overall survival" variable that is equal to days_to_death for dead patients, and to days_to_last_follow_up for patients who are still alive
clinical_skcm$overall_survival <- ifelse(clinical_skcm$vital_status == "Alive",
                                         clinical_skcm$days_to_last_follow_up,
                                         clinical_skcm$days_to_death)


# Get gene expression data
## Build a query to get gene expression data for entire cohort from Primary Tumor only
query_skcm_all = GDCquery(
  project = "TCGA-SKCM",
  data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
  experimental.strategy = "RNA-Seq",
  workflow.type = "STAR - Counts",
  data.type = "Gene Expression Quantification",
  sample.type = "Primary Tumor",
  access = "open")

output_skcm <- getResults(query_skcm_all)

# get all 103 primary tissue sample barcodes from which already had been extracts previously
tumor <- output_skcm[output_skcm$sample_type == "Primary Tumor", "cases"][1:103]
## Since all samples are primary tumor you could also use code below:
## tumor <- output_skcm$cases[1:103] 

## Get gene expression data from the 103 primary tumors 
query_skcm <- GDCquery(
  project = "TCGA-SKCM",
  data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
  experimental.strategy = "RNA-Seq",
  workflow.type = "STAR - Counts",
  data.type = "Gene Expression Quantification",
  sample.type = c("Primary Tumor", "Solid Tissue Normal"), 
  access = "open",
  barcode = tumor)

# download data for the filtered data set
GDCdownload(query_skcm)

# Get counts by looking at the unstranded expression levels, which is based on what was done in 
tcga_skcm_data <- GDCprepare(query_skcm, summarizedExperiment = TRUE)
skcm_matrix <- assay(tcga_skcm_data, 'unstranded')
skcm_matrix[1:10,1:10]

# Extract gene and sample metadata from summarizedExperiment object
# Create data frames from the tcga_skcm_data that contains the metadata and the coldata 
gene_metadata <- as.data.frame(rowData(tcga_skcm_data))
coldata <- as.data.frame(colData(tcga_skcm_data))

## Vairance stabilizing transformation (vst) transform counts to be used in survival analysis by setting up countData object 
## Note that this function when I used 'fpkm unstranded' due to error of some values were not integers, so I changed assay for matrix to 'unstranded'
dds <- DESeqDataSetFromMatrix(countData = skcm_matrix,
                              colData = coldata,
                              design = ~ 1)


## Removing genes with sum total of 10 reads across all samples (Keeping this as a place holder to see what I get without the removal of data)
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]

# vst 
vsd <- vst(dds, blind=FALSE)
skcm_matrix_vst <- assay(vsd)
skcm_matrix_vst[1:10,1:10]

## Get data for sex chromosome genes of interest and add genes metadata information to it

# If you want to extract multiple genes of interest
skcm_gene_2 <- skcm_matrix %>% 
  as.data.frame() %>% 
  rownames_to_column(var = 'gene_id') %>% 
  gather(key = 'case_id', value = 'counts', -gene_id) %>% 
  left_join(., gene_metadata, by = "gene_id") %>%
  filter(gene_name %in% c("XIST", "ZFY", "UTY", "USP9Y", "TMSB4Y", "RPS4Y1", "NLGN4Y", "KDM5D", "EIF1AY", "DDX3Y"))

skcm_gene_ZFY <- skcm_matrix %>% 
  as.data.frame() %>% 
  rownames_to_column(var = 'gene_id') %>% 
  gather(key = 'case_id', value = 'counts', -gene_id) %>% 
  left_join(., gene_metadata, by = "gene_id") %>% # Combines gene_metadata to skcm_matrix through gene_id's which is consistent between datasets. This allows to also have the gene id's with their gene names
  filter(gene_name == "ZFY") # extracts for gene of interest, noted that this can only do two genes at a time, for the most part, anyone know how to be able to extract all at the same time to perhaps see all genes at the same time?

### Do the same for all genes of interest
### "XIST", "ZFY", "UTY", "USP9Y", "TMSB4Y", "RPS4Y1", "NLGN4Y", "KDM5D", "EIF1AY", "DDX3Y"

### Extract for XIST
skcm_gene_XIST <- skcm_matrix %>% 
  as.data.frame() %>% 
  rownames_to_column(var = 'gene_id') %>% 
  gather(key = 'case_id', value = 'counts', -gene_id) %>% 
  left_join(., gene_metadata, by = "gene_id") %>%
  filter(gene_name == "XIST")

### Extract for UTY
skcm_gene_UTY <- skcm_matrix %>% 
  as.data.frame() %>% 
  rownames_to_column(var = 'gene_id') %>% 
  gather(key = 'case_id', value = 'counts', -gene_id) %>% 
  left_join(., gene_metadata, by = "gene_id") %>%
  filter(gene_name == "UTY")

### Extract for USP9Y
skcm_gene_USP9Y <- skcm_matrix %>% 
  as.data.frame() %>% 
  rownames_to_column(var = 'gene_id') %>% 
  gather(key = 'case_id', value = 'counts', -gene_id) %>% 
  left_join(., gene_metadata, by = "gene_id") %>%
  filter(gene_name == "USP9Y")

### Extract for TMSB4Y
skcm_gene_TMSB4Y <- skcm_matrix %>% 
  as.data.frame() %>% 
  rownames_to_column(var = 'gene_id') %>% 
  gather(key = 'case_id', value = 'counts', -gene_id) %>% 
  left_join(., gene_metadata, by = "gene_id") %>%
  filter(gene_name == "TMSB4Y")

### Extract for RPS4Y1
skcm_gene_RPS4Y1 <- skcm_matrix %>% 
  as.data.frame() %>% 
  rownames_to_column(var = 'gene_id') %>% 
  gather(key = 'case_id', value = 'counts', -gene_id) %>% 
  left_join(., gene_metadata, by = "gene_id") %>%
  filter(gene_name == "RPS4Y1")

### Extract for NLGN4Y
skcm_gene_NLGN4Y <- skcm_matrix %>% 
  as.data.frame() %>% 
  rownames_to_column(var = 'gene_id') %>% 
  gather(key = 'case_id', value = 'counts', -gene_id) %>% 
  left_join(., gene_metadata, by = "gene_id") %>%
  filter(gene_name == "NLGN4Y")

### Extract for KDM5D
skcm_gene_KDM5D <- skcm_matrix %>% 
  as.data.frame() %>% 
  rownames_to_column(var = 'gene_id') %>% 
  gather(key = 'case_id', value = 'counts', -gene_id) %>% 
  left_join(., gene_metadata, by = "gene_id") %>%
  filter(gene_name == "KDM5D")

### Extract for EIF1AY
skcm_gene_EIF1AY <- skcm_matrix %>% 
  as.data.frame() %>% 
  rownames_to_column(var = 'gene_id') %>% 
  gather(key = 'case_id', value = 'counts', -gene_id) %>% 
  left_join(., gene_metadata, by = "gene_id") %>%
  filter(gene_name == "EIF1AY")

### Extract for DDX3Y
skcm_gene_DDX3Y <- skcm_matrix %>% 
  as.data.frame() %>% 
  rownames_to_column(var = 'gene_id') %>% 
  gather(key = 'case_id', value = 'counts', -gene_id) %>% 
  left_join(., gene_metadata, by = "gene_id") %>%
  filter(gene_name == "DDX3Y")

## Get median value to determine which patients would be classfied as low, mediam, high expression groups

# Get median value for XIST expression counts
median_value_XIST <- median(skcm_gene_XIST$counts)

# Denote which cases have higher or lower expression than median count
skcm_gene_XIST$strata <- ifelse(skcm_gene_XIST$counts >= median_value_XIST, "HIGH", "LOW")


# 1) Get median value for ZFY expression counts
median_value_ZFY <- median(skcm_gene_ZFY$counts)

# Denote which cases have higher or lower expression than median count
skcm_gene_ZFY$strata <- ifelse(skcm_gene_ZFY$counts >= median_value_ZFY, "HIGH", "LOW")

# 2) Get median value for UTY expression counts
median_value_UTY <- median(skcm_gene_UTY$counts)

# Denote which cases have higher or lower expression than median count
skcm_gene_UTY$strata <- ifelse(skcm_gene_UTY$counts >= median_value_UTY, "HIGH", "LOW")

# 3) Get median value for USP9Y expression counts
median_value_USP9Y <- median(skcm_gene_USP9Y$counts)

# Denote which cases have higher or lower expression than median count
skcm_gene_USP9Y$strata <- ifelse(skcm_gene_USP9Y$counts >= median_value_USP9Y, "HIGH", "LOW")

# 4) Get median value for TMSB4Y expression counts
median_value_TMSB4Y <- median(skcm_gene_TMSB4Y$counts)

# Denote which cases have higher or lower expression than median count
skcm_gene_TMSB4Y$strata <- ifelse(skcm_gene_TMSB4Y$counts >= median_value_TMSB4Y, "HIGH", "LOW")

# 5) Get median value for RPS4Y1 expression counts
median_value_RPS4Y1 <- median(skcm_gene_RPS4Y1$counts)

# Denote which cases have higher or lower expression than median count
skcm_gene_RPS4Y1$strata <- ifelse(skcm_gene_RPS4Y1$counts >= median_value_RPS4Y1, "HIGH", "LOW")

# 6) Get median value for NLGN4Y expression counts
median_value_NLGN4Y <- median(skcm_gene_NLGN4Y$counts)

# Denote which cases have higher or lower expression than median count
skcm_gene_NLGN4Y$strata <- ifelse(skcm_gene_NLGN4Y$counts >= median_value_NLGN4Y, "HIGH", "LOW")

# 7) Get median value for KDM5D expression counts
median_value_KDM5D <- median(skcm_gene_KDM5D$counts)

# Denote which cases have higher or lower expression than median count
skcm_gene_KDM5D$strata <- ifelse(skcm_gene_KDM5D$counts >= median_value_KDM5D, "HIGH", "LOW")

# 8) Get median value for EIF1AY expression counts
median_value_EIF1AY <- median(skcm_gene_EIF1AY$counts)

# Denote which cases have higher or lower expression than median count
skcm_gene_EIF1AY$strata <- ifelse(skcm_gene_EIF1AY$counts >= median_value_EIF1AY, "HIGH", "LOW")

# 9) Get median value for DDX3Y expression counts
median_value_DDX3Y <- median(skcm_gene_DDX3Y$counts)

# Denote which cases have higher or lower expression than median count
skcm_gene_DDX3Y$strata <- ifelse(skcm_gene_DDX3Y$counts >= median_value_DDX3Y, "HIGH", "LOW")

## Add clinical information to genes by merging skcm_gene* to the respective clinical_skcm data through case_id and submitter_id
# Remove '-01' from the case ids in skcm_gene* so that we can merge skcm_gene* to clinical_skcm through submitter_id and case_id can match
skcm_gene_XIST$case_id <- gsub('-01.*', '', skcm_gene_XIST$case_id)
skcm_gene_XIST <- merge(skcm_gene_XIST, clinical_skcm, by.x = 'case_id', by.y = 'submitter_id')

### Do the same to all Y-linked genes: "ZFY", "UTY", "USP9Y", "TMSB4Y", "RPS4Y1", "NLGN4Y", "KDM5D", "EIF1AY", "DDX3Y"

# "ZFY" 
skcm_gene_ZFY$case_id <- gsub('-01.*', '', skcm_gene_ZFY$case_id)
skcm_gene_ZFY <- merge(skcm_gene_ZFY, clinical_skcm, by.x = 'case_id', by.y = 'submitter_id')

# "UTY" 
skcm_gene_UTY$case_id <- gsub('-01.*', '', skcm_gene_UTY$case_id)
skcm_gene_UTY <- merge(skcm_gene_UTY, clinical_skcm, by.x = 'case_id', by.y = 'submitter_id')

# "USP9Y" 
skcm_gene_USP9Y$case_id <- gsub('-01.*', '', skcm_gene_USP9Y$case_id)
skcm_gene_USP9Y <- merge(skcm_gene_USP9Y, clinical_skcm, by.x = 'case_id', by.y = 'submitter_id')

# "TMSB4Y"
skcm_gene_TMSB4Y$case_id <- gsub('-01.*', '', skcm_gene_TMSB4Y$case_id)
skcm_gene_TMSB4Y <- merge(skcm_gene_TMSB4Y, clinical_skcm, by.x = 'case_id', by.y = 'submitter_id')

# "RPS4Y1"
skcm_gene_RPS4Y1$case_id <- gsub('-01.*', '', skcm_gene_RPS4Y1$case_id)
skcm_gene_RPS4Y1 <- merge(skcm_gene_RPS4Y1, clinical_skcm, by.x = 'case_id', by.y = 'submitter_id')

# "NLGN4Y"
skcm_gene_NLGN4Y$case_id <- gsub('-01.*', '', skcm_gene_NLGN4Y$case_id)
skcm_gene_NLGN4Y <- merge(skcm_gene_NLGN4Y, clinical_skcm, by.x = 'case_id', by.y = 'submitter_id')

# "KDM5D"
skcm_gene_KDM5D$case_id <- gsub('-01.*', '', skcm_gene_KDM5D$case_id)
skcm_gene_KDM5D <- merge(skcm_gene_KDM5D, clinical_skcm, by.x = 'case_id', by.y = 'submitter_id')

# "EIF1AY"
skcm_gene_EIF1AY$case_id <- gsub('-01.*', '', skcm_gene_EIF1AY$case_id)
skcm_gene_EIF1AY <- merge(skcm_gene_EIF1AY, clinical_skcm, by.x = 'case_id', by.y = 'submitter_id')

# "DDX3Y"
skcm_gene_DDX3Y$case_id <- gsub('-01.*', '', skcm_gene_DDX3Y$case_id)
skcm_gene_DDX3Y <- merge(skcm_gene_DDX3Y, clinical_skcm, by.x = 'case_id', by.y = 'submitter_id')


### Merge all of the data between skcm_gene (note this is note filtered for specific gene) to clinical_skcm
skcm_gene_2$case_id <- gsub('-01.*', '', skcm_gene_2$case_id)
skcm_gene_merge <- merge(skcm_gene_2, clinical_skcm, by.x = 'case_id', by.y = 'submitter_id')


## Fitting survival curve (help to see if we could include gender, or would this not be necessary since the genes are repective to the gender?)

## Create survival analysis curve for XIST
fit_XIST <- survfit(Surv(overall_survival, deceased) ~ strata, data = skcm_gene_XIST)
fit_XIST
ggsurvplot(fit_XIST,
           title = "XIST Survival Analysis Curve in TCGA-SKCM",
           data = skcm_gene_XIST,
           pval = T,
           risk.table = T)


### Do the same to all Y-linked genes: "ZFY", "UTY", "USP9Y", "TMSB4Y", "RPS4Y1", "NLGN4Y", "KDM5D", "EIF1AY", "DDX3Y"
## Create survival analysis curve for ZFY
fit_ZFY <- survfit(Surv(overall_survival, deceased) ~ strata, data = skcm_gene_ZFY)
fit_ZFY
ggsurvplot(fit_ZFY,
           title = "ZFY Survival Analysis Curve in TCGA-SKCM",
           data = skcm_gene_ZFY,
           pval = T,
           risk.table = T)

## Create survival analysis curve for UTY
fit_UTY <- survfit(Surv(overall_survival, deceased) ~ strata, data = skcm_gene_UTY)
fit_UTY
ggsurvplot(fit_UTY,
           title = "UTY Survival Analysis Curve in TCGA-SKCM",
           data = skcm_gene_UTY,
           pval = T,
           risk.table = T)

## Create survival analysis curve for USP9Y
fit_USP9Y <- survfit(Surv(overall_survival, deceased) ~ strata, data = skcm_gene_USP9Y)
fit_USP9Y
ggsurvplot(fit_USP9Y,
           title = "USP9Y Survival Analysis Curve in TCGA-SKCM",
           data = skcm_gene_USP9Y,
           pval = T,
           risk.table = T)

## Create survival analysis curve for TMSB4Y
fit_TMSB4Y <- survfit(Surv(overall_survival, deceased) ~ strata, data = skcm_gene_TMSB4Y)
fit_TMSB4Y
ggsurvplot(fit_TMSB4Y,
           title = "TMSB4Y Survival Analysis Curve in TCGA-SKCM",
           data = skcm_gene_TMSB4Y,
           pval = T,
           risk.table = T)

## Create survival analysis curve for RPS4Y1
fit_RPS4Y1 <- survfit(Surv(overall_survival, deceased) ~ strata, data = skcm_gene_RPS4Y1)
fit_RPS4Y1
ggsurvplot(fit_RPS4Y1,
           title = "RPS4Y1 Survival Analysis Curve in TCGA-SKCM",
           data = skcm_gene_RPS4Y1,
           pval = T,
           risk.table = T)

## Create survival analysis curve for NLGN4Y
fit_NLGN4Y <- survfit(Surv(overall_survival, deceased) ~ strata, data = skcm_gene_NLGN4Y)
fit_NLGN4Y
ggsurvplot(fit_NLGN4Y,
           title = "NLGN4Y Survival Analysis Curve in TCGA-SKCM",
           data = skcm_gene_NLGN4Y,
           pval = T,
           risk.table = T)

## Create survival analysis curve for KDM5D
fit_KDM5D <- survfit(Surv(overall_survival, deceased) ~ strata, data = skcm_gene_KDM5D)
fit_KDM5D
ggsurvplot(fit_KDM5D,
           title = "KDM5D Survival Analysis Curve in TCGA-SKCM",
           data = skcm_gene_KDM5D,
           pval = T,
           risk.table = T)

## Create survival analysis curve for EIF1AY
fit_EIF1AY <- survfit(Surv(overall_survival, deceased) ~ strata, data = skcm_gene_EIF1AY)
fit_EIF1AY
ggsurvplot(fit_EIF1AY,
           title = "EIF1AY Survival Analysis Curve in TCGA-SKCM",
           data = skcm_gene_EIF1AY,
           pval = T,
           risk.table = T)

## Create survival analysis curve for DDX3Y
fit_DDX3Y <- survfit(Surv(overall_survival, deceased) ~ strata, data = skcm_gene_DDX3Y)
fit_DDX3Y
ggsurvplot(fit_DDX3Y,
           title = "DDX3Y Survival Analysis Curve in TCGA-SKCM",
           data = skcm_gene_DDX3Y,
           pval = T,
           risk.table = T)


